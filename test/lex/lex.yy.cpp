// lex.yy.cpp generated by reflex 3.0.7 from calc.l

#define REFLEX_VERSION "3.0.7"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "lex.yy.h"
#define REFLEX_OPTION_input_filename      calc.l
#define REFLEX_OPTION_input_offset        40
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_outfile             "lex.yy.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 53 "calc.l"

  #include <cstdlib>
  #include <string>
  #include <map>

  // fixes problem with Bison 2.7 that needs the Lexer class type:
  class REFLEX_OPTION_lexer;  // = %option lexer (which is 'Lexer' by default)

  #include "calc.tab.h"


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {
#line 68 "calc.l"

 public:
  std::map<std::wstring,double> map;
 private:
  std::wstring                  var;

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex(void);
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 41 "calc.l"
// An interactive calculator with Unicode identifier variables
// Builds with bison-bridge to pass Lexer object 'lexer' to bison parser
// $ reflex calc.l
// $ bison -y -d calc.y
// $ c++ -o calc y.tab.c lex.yy.cpp -lreflex
// Example:
// $ ./calc
// π = 3.14
// => 3.14
// π/2
// => 1.57

#line 64 "calc.l"

  extern void yyerror(Lexer *lexer, const char *msg);


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int Lexer::lex(void)
{
  static const char *REGEX_INITIAL = "(?mx)((?:[A-Z_a-z][0-9A-Z_a-z]*))|((?:\\d*(?:\\d|\\.\\d|\\d\\.)\\d*(?:[Ee][\\x2b\\x2d]?\\d+)?))|([(-+\\x2d/=])|(\\n)|(\\s)|(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return int();
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule calc.l:83: {var} :
#line 83 "calc.l"
{ var = wstr(); yylval.var = &var; return 'V'; }
            break;
          case 2: // rule calc.l:84: {num} :
#line 84 "calc.l"
{ yylval.num = strtod(text(), NULL); return 'N'; }
            break;
          case 3: // rule calc.l:85: [-+*/=()] :
#line 85 "calc.l"
{ return *text(); }
            break;
          case 4: // rule calc.l:86: \n :
#line 86 "calc.l"
{ return '\n'; }
            break;
          case 5: // rule calc.l:87: \s :
#line 87 "calc.l"
// ignore space
            break;
          case 6: // rule calc.l:88: . :
#line 88 "calc.l"
{ yyerror(this, "mystery character"); }

            break;
        }
  }
}
